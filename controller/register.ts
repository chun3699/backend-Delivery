import express from "express";
import { conn } from "../dbconnect";
// import { User } from "../model/user"; // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ User model ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ

import mysql from "mysql2/promise";
// import util from "util"; // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ util.promisiŒ©fy
// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: Import RowDataPacket ‡πÅ‡∏•‡∏∞ ResultSetHeader ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
import { ResultSetHeader, RowDataPacket } from "mysql2";

export const router = express.Router();

// -------------------- REGISTER USER (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°) --------------------
router.post("/user", async (req, res) => {
  // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å body (‡πÄ‡∏û‡∏¥‡πà‡∏° profileImage)
  const { name, phone, password, address, latitude, longitude, profileImage } = req.body;

  // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô (profileImage ‡πÄ‡∏õ‡πá‡∏ô optional)
  if (!name || !phone || !password || !address || latitude == null || longitude == null) {
    return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‡∏ä‡∏∑‡πà‡∏≠, ‡πÄ‡∏ö‡∏≠‡∏£‡πå, ‡∏£‡∏´‡∏±‡∏™, ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà, ‡∏û‡∏¥‡∏Å‡∏±‡∏î)" });
  }

  let connection: mysql.PoolConnection | undefined;

  try {
    // 3. ‡πÄ‡∏£‡∏¥‡πà‡∏° Transaction
    connection = await conn.getConnection();
    await connection.beginTransaction();

    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'users' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [existingUsers] = await connection.query<RowDataPacket[]>( // <--- ‡πÉ‡∏ä‡πâ RowDataPacket ‡∏ó‡∏µ‡πà Import ‡∏°‡∏≤
      "SELECT user_id FROM users WHERE phone = ?",
      [phone]
    );

    if (existingUsers.length > 0) {
      await connection.rollback();
      return res.status(409).json({ message: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß" });
    }

    // 5. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'users' (‡πÄ‡∏û‡∏¥‡πà‡∏° profile_image)
    const [userResult] = await connection.query<ResultSetHeader>( // <--- ‡πÉ‡∏ä‡πâ ResultSetHeader ‡∏ó‡∏µ‡πà Import ‡∏°‡∏≤
      "INSERT INTO users (name, phone, password, profile_image) VALUES (?, ?, ?, ?)",
      [name, phone, password, profileImage ?? null] // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å profileImage (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    );

    const newUserId = userResult.insertId;
    if (!newUserId) {
      throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ (No Insert ID)");
    }

    // 6. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'address'
    // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ Type generic ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    await connection.query(
      "INSERT INTO address (user_id, address, latitude, longitude) VALUES (?, ?, ?, ?)",
      [newUserId, address, latitude, longitude]
    );

    // 7. ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Transaction
    await connection.commit();

    // 8. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö (‡∏°‡∏µ‡πÅ‡∏Ñ‡πà message ‡πÅ‡∏•‡∏∞ userId ‡∏ï‡∏≤‡∏° Model ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
    res.status(201).json({
      message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      userId: newUserId,
     });

  } catch (error) {
    // 9. Rollback Transaction ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    if (connection) {
      await connection.rollback();
    }
    console.error("‚ùå Error in /register/user:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", error: (error instanceof Error ? error.message : String(error)) });

  } finally {
    // 10. ‡∏Ñ‡∏∑‡∏ô connection ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ pool ‡πÄ‡∏™‡∏°‡∏≠
    if (connection) {
      connection.release();
    }
  }
});



// --- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Route ‡∏ô‡∏µ‡πâ ---
// -------------------- REGISTER RIDER --------------------
router.post("/rider", async (req, res) => {
// -----------------------
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (profileImage, licenseImage)
    const { name, phone, password, car_number, profileImage, licenseImage } = req.body;
    console.log("üì• Register rider request:", req.body); // Log request body ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô (‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô optional)
     if (!name || !phone || !password || !car_number) { // <-- ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠ field ‡πÄ‡∏õ‡πá‡∏ô car_number
        return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‡∏ä‡∏∑‡πà‡∏≠, ‡πÄ‡∏ö‡∏≠‡∏£‡πå, ‡∏£‡∏´‡∏±‡∏™, ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ)" });
     }


    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ã‡πâ‡∏≥‡∏Å‡πà‡∏≠‡∏ô
     const [existingRiders] = await conn.query<RowDataPacket[]>( // <--- ‡πÉ‡∏ä‡πâ RowDataPacket ‡∏ó‡∏µ‡πà Import ‡∏°‡∏≤
        "SELECT rider_id FROM rider WHERE phone = ?",
        [phone]
     );

     if (existingRiders.length > 0) {
        return res.status(409).json({ message: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå)" });
     }


    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç SQL ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° profile_image ‡πÅ‡∏•‡∏∞ car_image
    const sql = `
      INSERT INTO rider (name, phone, password, profile_image, car_image, car_number)
      VALUES (?, ?, ?, ?, ?, ?)
    `; // <-- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç SQL

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° profileImage ‡πÅ‡∏•‡∏∞ licenseImage ‡πÉ‡∏ô parameters
    const [result] = await conn.query<ResultSetHeader>(sql, [ // <--- ‡πÉ‡∏ä‡πâ ResultSetHeader ‡∏ó‡∏µ‡πà Import ‡∏°‡∏≤
      name,
      phone,
      password, // ‡∏Ñ‡∏ß‡∏£ Hash ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏£‡∏¥‡∏á
      profileImage ?? null, // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏° profileImage (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô null)
      licenseImage ?? null, // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏° licenseImage (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô null) - ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ Frontend ‡∏™‡πà‡∏á key ‡∏ô‡∏µ‡πâ‡∏°‡∏≤
      car_number,           // <-- ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠ field ‡πÄ‡∏õ‡πá‡∏ô car_number
    ]);

    res.status(201).json({
      message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      affectedRows: result.affectedRows,
      lastId: result.insertId,
    });
  } catch (error) {
    console.error("‚ùå Register rider error:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå", error: (error instanceof Error ? error.message : String(error)) });
  }
});

